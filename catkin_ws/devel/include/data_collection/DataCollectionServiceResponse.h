// Generated by gencpp from file data_collection/DataCollectionServiceResponse.msg
// DO NOT EDIT!


#ifndef DATA_COLLECTION_MESSAGE_DATACOLLECTIONSERVICERESPONSE_H
#define DATA_COLLECTION_MESSAGE_DATACOLLECTIONSERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>
#include <sensor_msgs/LaserScan.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/Image.h>

namespace data_collection
{
template <class ContainerAllocator>
struct DataCollectionServiceResponse_
{
  typedef DataCollectionServiceResponse_<ContainerAllocator> Type;

  DataCollectionServiceResponse_()
    : force()
    , scan()
    , rgb_image()
    , depth_image()  {
    }
  DataCollectionServiceResponse_(const ContainerAllocator& _alloc)
    : force(_alloc)
    , scan(_alloc)
    , rgb_image(_alloc)
    , depth_image(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _force_type;
  _force_type force;

   typedef  ::sensor_msgs::LaserScan_<ContainerAllocator>  _scan_type;
  _scan_type scan;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _rgb_image_type;
  _rgb_image_type rgb_image;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _depth_image_type;
  _depth_image_type depth_image;





  typedef boost::shared_ptr< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DataCollectionServiceResponse_

typedef ::data_collection::DataCollectionServiceResponse_<std::allocator<void> > DataCollectionServiceResponse;

typedef boost::shared_ptr< ::data_collection::DataCollectionServiceResponse > DataCollectionServiceResponsePtr;
typedef boost::shared_ptr< ::data_collection::DataCollectionServiceResponse const> DataCollectionServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::data_collection::DataCollectionServiceResponse_<ContainerAllocator1> & lhs, const ::data_collection::DataCollectionServiceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.force == rhs.force &&
    lhs.scan == rhs.scan &&
    lhs.rgb_image == rhs.rgb_image &&
    lhs.depth_image == rhs.depth_image;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::data_collection::DataCollectionServiceResponse_<ContainerAllocator1> & lhs, const ::data_collection::DataCollectionServiceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace data_collection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41632732880911714af62c21b97ffe30";
  }

  static const char* value(const ::data_collection::DataCollectionServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4163273288091171ULL;
  static const uint64_t static_value2 = 0x4af62c21b97ffe30ULL;
};

template<class ContainerAllocator>
struct DataType< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_collection/DataCollectionServiceResponse";
  }

  static const char* value(const ::data_collection::DataCollectionServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Twist force\n"
"sensor_msgs/LaserScan scan\n"
"sensor_msgs/Image rgb_image\n"
"sensor_msgs/Image depth_image\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: sensor_msgs/LaserScan\n"
"# Single scan from a planar laser range-finder\n"
"#\n"
"# If you have another ranging device with different behavior (e.g. a sonar\n"
"# array), please find or create a different message, since applications\n"
"# will make fairly laser-specific assumptions about this data\n"
"\n"
"Header header            # timestamp in the header is the acquisition time of \n"
"                         # the first ray in the scan.\n"
"                         #\n"
"                         # in frame frame_id, angles are measured around \n"
"                         # the positive Z axis (counterclockwise, if Z is up)\n"
"                         # with zero angle being forward along the x axis\n"
"                         \n"
"float32 angle_min        # start angle of the scan [rad]\n"
"float32 angle_max        # end angle of the scan [rad]\n"
"float32 angle_increment  # angular distance between measurements [rad]\n"
"\n"
"float32 time_increment   # time between measurements [seconds] - if your scanner\n"
"                         # is moving, this will be used in interpolating position\n"
"                         # of 3d points\n"
"float32 scan_time        # time between scans [seconds]\n"
"\n"
"float32 range_min        # minimum range value [m]\n"
"float32 range_max        # maximum range value [m]\n"
"\n"
"float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)\n"
"float32[] intensities    # intensity data [device-specific units].  If your\n"
"                         # device does not provide intensities, please leave\n"
"                         # the array empty.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
;
  }

  static const char* value(const ::data_collection::DataCollectionServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force);
      stream.next(m.scan);
      stream.next(m.rgb_image);
      stream.next(m.depth_image);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DataCollectionServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_collection::DataCollectionServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_collection::DataCollectionServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.force);
    s << indent << "scan: ";
    s << std::endl;
    Printer< ::sensor_msgs::LaserScan_<ContainerAllocator> >::stream(s, indent + "  ", v.scan);
    s << indent << "rgb_image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.rgb_image);
    s << indent << "depth_image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.depth_image);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_COLLECTION_MESSAGE_DATACOLLECTIONSERVICERESPONSE_H
